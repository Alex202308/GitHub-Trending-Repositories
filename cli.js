const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

const command = process.argv[2];
const param = process.argv[3];

async function main() {
    try {
        if (command === 'list') {
            const res = await axios.get(`${BASE_URL}/repos`);
            res.data.forEach((repo) => {
                console.log(
                    `${repo.id}. ${repo.name} ‚òÖ${repo.stargazers_count}`
                );
            });
        } else if (command === 'get') {
            if (!param) {
                return console.log('‚ùó –£–∫–∞–∂–∏ ID –∏–ª–∏ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è');
            }
            const res = await axios.get(`${BASE_URL}/repos/${param}`);
            console.log(res.data);
        } else if (command === 'sync') {
            const res = await axios.post(`${BASE_URL}/sync`);
            console.log(res.data.message);
        } else {
            console.log(`
üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node cli.js list          ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  node cli.js get <id|name> ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏
  node cli.js sync          ‚Äî —Ñ–æ—Ä—Å-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub
`);
        }
    } catch (err) {
        if (err.response) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err.response.status, err.response.data);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
        }
    }
}

main();
