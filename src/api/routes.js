// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const express = require('express');
const router = express.Router(); // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
const pool = require('../db'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
const { forceSyncNow } = require('../timer'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä—Å-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

// üîπ GET /api/repos ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
router.get('/repos', async (req, res) => {
    try {
        // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
        const result = await pool.query(
            'SELECT * FROM repositories ORDER BY stargazers_count DESC'
        );
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        res.json(result.rows);
    } catch (err) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è
        res.status(500).json({ error: err.message });
    }
});

// üîπ GET /api/repos/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏
router.get('/repos/:identifier', async (req, res) => {
    const { identifier } = req.params; // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL

    try {
        let result;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —á–∏—Å–ª–æ–º (ID) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (–∏–º—è)
        if (!isNaN(identifier)) {
            // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∏—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ ID
            result = await pool.query(
                'SELECT * FROM repositories WHERE id = $1',
                [identifier]
            );
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∏—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ –∏–º–µ–Ω–∏
            result = await pool.query(
                'SELECT * FROM repositories WHERE name = $1',
                [identifier]
            );
        }

        // –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Repository not found' });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        res.json(result.rows[0]);
    } catch (err) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
        res.status(500).json({ error: err.message });
    }
});

// üîπ POST /api/sync ‚Äî —Ñ–æ—Ä—Å-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
router.post('/sync', async (req, res) => {
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä—Å-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä
        await forceSyncNow();
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        res.status(200).json({ message: '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    } catch (err) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        res.status(500).json({ error: err.message });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ index.js
module.exports = router;
